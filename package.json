{
  "name": "voxel-waxy-terrain",
  "version": "0.0.1b",
  "description": "A terrain generator using simulated annealing designed for voxel.",
  "keywords": ["voxel", "terrain", "annealing", "wax"],
  "homepage": {"url":"http://github.com/i1abnrk/WaxyGenerator"},
  "bugs": {"url":"http://github.com/i1abnrk/WaxyGenerator/issues/"},
  "license": {"type" : "CC BY-NA 3.0", "url" : "http://creativecommons.org/licenses/by-nc/3.0/"},
  "author": {"name":"Zakri M. Kneebone", "email":"i1abnrk@yahoo.com"},
  "files": ["waxy.js", "waxyTest.html", "README.md", "node_modules/", "playtest.js", "playtestpre.js", "playtest.html"],
  "scripts":{"start":"node waxy.js"},
  "main": {"waxy.js"},
  "repository":{"type":"git", "url":"https://github.com/i1abnrk/WaxyGenerator.git"},
  "dependencies":{"voxel-engine": ">=0.15.0", "painterly-textures": "0.0.3"},
  "devDependencies":{"browserify": "2.10.x"},
  "readme":"##About\nAuthor: Zakri M. Kneebone\nLicense: CC BY-NC 3.0 (see http://creativecommons.org/licenses/by-nc/3.0/) (see additional warnings below)\nProject: WaxyGenerator (waxy.js)\nPurpose: A 3D fractal terrain generator designed to look like a melted wax sculpture and to the plan is to interface it with the voxel.js package. (http://github.com/maxogden/voxeljs/)\n\n##Classes\\nClasses: Point, ConnectedPoint, BoundingBox, BoxIterator, MapProperty, MapData, DropSheet, WaxyGenerator \n\nPoint: a wrapper class for an x,y,z triple. Constructor takes arguments {x,y,z}, noargs produces Point(0,0,0). Method translate returns a new Point instance thatis the specified x,y,z distance away from the current instance. For a Point _p1_ at (1,-2,-3) a call to _p1_.translate({x:4,y:-5,z:6}) returns a new Point _p2_ with coordinates {x:5,y:-7,z:3} \n\nConnectedPoint: a Point with reference to 6 neighbors: below, north, south, east, west and above. An array of all 6 (and not center) is returned with the facets property, respective of that order. The original Point is the center property of a ConnectedPoint instance. \n\nBoundingBox: a rectangular prism defined by two corners: lowerBound and upperBound.lowerBound and upperBound are both instances of Point, having x,y,z. Constructor takes these two Points as an array. Size methods are available for width (x-axis), height (y-axis) and depth (z-axis). There are two set logic methods: contains and intersects. _contains_ returns true if all of the Points in parameter _other_ are within the instance. _intersects_ returns true if some or all of the parameter lies within bounds of the instance. The method _iterator_ returns an instance of _BoxIterator_ for iterating over the bounds of the instance it is called from.  \n\nBoxIterator: an Iterator starting at lowerBound and proceeding through each integer point until upperBound. It has two methods, hasNext() and next(). hasNext() returns true if next() has not yet returned the Point defined by the upperBound property of the parameter passed to constructor. \n\nMapProperty: a property common to all Points in the BoundingBox of a MapData instance. Each MapProperty has three elements: key (a String name), type (a javascript primitive type. Not implemented.), and defaultValue (the value set for each x,y,z,property on initialization). \n\nMapData: an in-memory storage for map property values. Use the function map() to get values and use property data[] to set values. Constructor takes two arguments: workingSet and properties where _workingSet_ is an instance of BoundingBox and _properties_ is an array of MapProperty instances. Property propKeys is an array of property key strings used as the 4th dimension of the data array. \n\nWaxyGenerator: generate is the main loop. Properties are many and changing too fast to document, see the code for details. \n\n##Design notes:\n\neach spot has a temperature, the hotter it is, the less sticky it is. \n\neach drop has a high initial temperature \n\nthe drop will heat up or cool down on contact with a spot \n\neach spot has six neighbors, (above, below, north, south, east, west) \n\nthe temperature of a spot is the mean temperature of the neighbors and itself \n\nan empty spot has a temperature of freezing \n\nif the drop is above freezing it will randomly move to an empty neighbor \n\nif the drop hits the floor (y===0) it will freeze instantly \n\nif a drop freezes it will fall until a not empty spot is below it \n\na drop will move below 90%, nsew 9% (2.25% each), above (1%) while it is hot \n\nconstructed in a way that each property has its own map \n\n##Warnings \n\n*Disclaimer:* This program is distributed without any implied warranty or fitness for any particular use. It is experimental and as such it may break your computer equipment or cause other consequential damages. Using this software means you accept this risk as your personal responsibility. If you are unable to accept this risk you are not allowed to use this program. \n\nResource hog: this algorithm requires about 25GBh of processing time per million Points of BoundingBox space. You may want to increase the heap size of your interpreter. \n\nI like to use a setting of 4096K."
}
